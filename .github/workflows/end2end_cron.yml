---
name: End-to-End Tests

on:
    push:
        branches:
            - master
            - develop

    pull_request:
        branches:
            - master
            - develop
    schedule:
        - cron: 0 0 * * * # At Midnight Every Day
    workflow_dispatch:

jobs:
    docker-build:
        name: Build Docker Image
        runs-on: [self-hosted, gpu]
        steps:
            - uses: actions/checkout@v3
              with:
                  fetch-depth: 0
            - uses: actions/setup-python@v2
              with:
                  python-version: "3.7"
            - name: Build Docker
              id: docker-build
              run: |
                  pip install -r requirements.txt
                  pip install -e .
                  python docker/build.py all
        outputs:
            imageTag: ${{ steps.docker-build.outputs.imageTag }}
    docker-pytorch-end2end:
        name: Docker Torch End2End
        needs: docker-build
        runs-on: [self-hosted, gpu]
        steps:
            - name: Run Tests Torch Docker
              run: |
                  imageName=twosixarmory/pytorch:${{ needs.docker-build.outputs.imageTag }}
                  echo "Running Tests with Image -> $imageName"
                  docker run -w /armory-repo/ $imageName pytest -vs -m "not docker_required and end_to_end" ./tests/
    docker-tf2-end2end:
        name: Docker TF2 End2End
        needs: docker-build
        runs-on: [self-hosted, gpu]
        steps:
            - name: Run Tests TF2 Docker
              run: |
                  imageName=twosixarmory/tf2:${{ needs.docker-build.outputs.imageTag }}
                  echo "Running Tests with Image -> $imageName"
                  docker run -w /armory-repo/ $imageName pytest -vs -m "not docker_required and end_to_end" ./tests/
    docker-deepspeech-end2end:
        name: Docker Deepspeech End2End
        needs: docker-build
        runs-on: [self-hosted, gpu]
        steps:
            - name: Run Tests Deepspeech Docker
              run: |
                  imageName=twosixarmory/pytorch-deepspeech:${{ needs.docker-build.outputs.imageTag }}
                  echo "Running Tests with Image -> $imageName"
                  docker run -w /armory-repo/ $imageName pytest -vs -m "not docker_required and end_to_end" ./tests/

    # TODO: the until time might need to be reduced depending on measured usage
    docker-prune:
        name: remove docker images older than one week
        runs-on: [self-hosted, gpu]
        steps:
            - run: docker image prune -a --force --filter "until=168h"
